import { Component, inject, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
import { CommonModule } from '@angular/common';
import { CdkDragDrop, CdkDrag, CdkDropList } from '@angular/cdk/drag-drop';
import { FormsModule } from '@angular/forms';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞–ø—Ä—è–º—É—é –≤–º–µ—Å—Ç–æ lazy loading –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
import { ProgressBarWidgetComponent } from '../widgets/progress-bar-widget/progress-bar-widget.component';
import { TaskStatsWidgetComponent } from '../widgets/task-stats-widget/task-stats-widget.component';
import { TimelineWidgetComponent } from '../widgets/timeline-widget/timeline-widget.component';

import { DashboardStore } from '../../stores/dashboard.store';
import { WidgetType } from '../../models/project.model';

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [
    CommonModule, 
    FormsModule, 
    CdkDropList, 
    CdkDrag,
    ProgressBarWidgetComponent,
    TaskStatsWidgetComponent,
    TimelineWidgetComponent
  ],
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.scss'],
  schemas: [CUSTOM_ELEMENTS_SCHEMA]
})
export class DashboardComponent {
  private store = inject(DashboardStore);

  // State from store
  widgets = this.store.widgets;
  filters = this.store.filters;
  isLoading = this.store.isLoading;
  
  // Available widget types
  widgetTypes = [
    { type: WidgetType.PROGRESS_BAR, name: '–ü—Ä–æ–≥—Ä–µ—Å—Å', icon: 'üìä' },
    { type: WidgetType.TASK_STATS, name: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', icon: 'üìà' },
    { type: WidgetType.TIMELINE, name: '–¢–∞–π–º–ª–∞–π–Ω', icon: '‚è∞' }
  ];

  statusFilters = [
    { value: 'all', label: '–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã' },
    { value: 'active', label: '–ê–∫—Ç–∏–≤–Ω—ã–µ' },
    { value: 'completed', label: '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ' },
    { value: 'on_hold', label: '–ù–∞ –ø–∞—É–∑–µ' }
  ];

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–∏–¥–∂–µ—Ç–∞
  getWidgetTitle(widgetType: WidgetType): string {
    const widgetMap: { [key in WidgetType]: string } = {
      [WidgetType.PROGRESS_BAR]: '–ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ–µ–∫—Ç–æ–≤',
      [WidgetType.TASK_STATS]: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á',
      [WidgetType.TIMELINE]: '–¢–∞–π–º–ª–∞–π–Ω –ø—Ä–æ–µ–∫—Ç–æ–≤'
    };
    return widgetMap[widgetType] || '–í–∏–¥–∂–µ—Ç';
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ —Ç–∏–ø—É
  getWidgetComponent(widgetType: WidgetType): any {
    const componentMap: { [key in WidgetType]: any } = {
      [WidgetType.PROGRESS_BAR]: ProgressBarWidgetComponent,
      [WidgetType.TASK_STATS]: TaskStatsWidgetComponent,
      [WidgetType.TIMELINE]: TimelineWidgetComponent
    };
    return componentMap[widgetType];
  }

  // Actions
  onSearchChange(query: string): void {
    this.store.updateFilters({ searchQuery: query });
  }

  onStatusChange(status: string): void {
    this.store.updateFilters({ statusFilter: status as any });
  }

  addWidget(widgetType: WidgetType): void {
    this.store.addWidget(widgetType);
  }

  removeWidget(widgetId: string): void {
    this.store.removeWidget(widgetId);
  }

  onWidgetDrop(event: CdkDragDrop<any[]>): void {
    if (event.previousIndex !== event.currentIndex) {
      this.store.updateWidgetPosition(event.previousIndex, event.currentIndex);
    }
  }
}